"""init

Revision ID: 2ca870aa737d
Revises:
Create Date: 2023-05-23 13:55:40.665762

"""
import sqlalchemy as sa
import sqlmodel  # added
from alembic import op
from sqlalchemy.dialects import postgresql
from sqlmodel import create_engine

from app.core.settings import app_settings

# revision identifiers, used by Alembic.
revision = "2ca870aa737d"
down_revision = None
branch_labels = None
depends_on = None


SQLALCHEMY_DATABASE_URL = app_settings.database_url

engine = create_engine(SQLALCHEMY_DATABASE_URL, echo=True)


# SQLModel.metadata.create_all() is not properly generations tables,
# alternative approach would be using one table metadata to create it and all linked tables
def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "borrower",
        sa.Column(
            "size",
            sa.Enum("NOT_INFORMED", "MICRO", "SMALL", "MEDIUM", name="borrower_size"),
            nullable=True,
        ),
        sa.Column(
            "status",
            sa.Enum("ACTIVE", "DECLINE_OPPORTUNITIES", name="borrower_status"),
            nullable=True,
        ),
        sa.Column("source_data", postgresql.JSON(astext_type=sa.Text()), nullable=True),
        sa.Column(
            "missing_data", postgresql.JSON(astext_type=sa.Text()), nullable=True
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("declined_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "borrower_identifier", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column("legal_name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("email", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("address", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column(
            "legal_identifier", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column("type", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("sector", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("borrower_identifier"),
    )
    op.create_table(
        "lender",
        sa.Column(
            "borrowed_type_preferences",
            postgresql.JSON(astext_type=sa.Text()),
            nullable=True,
        ),
        sa.Column(
            "limits_preferences", postgresql.JSON(astext_type=sa.Text()), nullable=True
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("email_group", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("status", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("type", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("sla_days", sa.Integer(), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "award",
        sa.Column("award_date", sa.DateTime(), nullable=True),
        sa.Column("award_amount", sa.DECIMAL(precision=16, scale=2), nullable=False),
        sa.Column("contractperiod_startdate", sa.DateTime(), nullable=True),
        sa.Column("contractperiod_enddate", sa.DateTime(), nullable=True),
        sa.Column(
            "payment_method", postgresql.JSON(astext_type=sa.Text()), nullable=True
        ),
        sa.Column("source_last_updated_at", sa.DateTime(), nullable=True),
        sa.Column(
            "source_data_contracts",
            postgresql.JSON(astext_type=sa.Text()),
            nullable=True,
        ),
        sa.Column(
            "source_data_awards", postgresql.JSON(astext_type=sa.Text()), nullable=True
        ),
        sa.Column(
            "missing_data", postgresql.JSON(astext_type=sa.Text()), nullable=True
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("borrower_id", sa.Integer(), nullable=True),
        sa.Column(
            "source_contract_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column("title", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("award_currency", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("buyer_name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("source_url", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("entity_code", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column(
            "contract_status", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column("previous", sa.Boolean(), nullable=False),
        sa.Column(
            "procurement_method", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column(
            "contracting_process_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column(
            "procurement_category", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["borrower_id"],
            ["borrower.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "user",
        sa.Column("type", sa.Enum("OCP", "FI", name="user_type"), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("language", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("email", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("external_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("lender_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["lender_id"],
            ["lender.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email"),
    )
    op.create_table(
        "application",
        sa.Column(
            "status",
            sa.Enum(
                "PENDING",
                "ACCEPTED",
                "LAPSED",
                "DECLINED",
                "SUBMITTED",
                "STARTED",
                "APPROVED",
                "CONTRACT_UPLOADED",
                "COMPLETED",
                "REJECTED",
                "INFORMATION_REQUESTED",
                name="application_status",
            ),
            nullable=True,
        ),
        sa.Column(
            "contract_amount_submitted",
            sa.DECIMAL(precision=16, scale=2),
            nullable=True,
        ),
        sa.Column("amount_requested", sa.DECIMAL(precision=16, scale=2), nullable=True),
        sa.Column(
            "calculator_data", postgresql.JSON(astext_type=sa.Text()), nullable=True
        ),
        sa.Column("borrower_submitted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("borrower_accepted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("borrower_declined_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column(
            "borrower_declined_preferences_data",
            postgresql.JSON(astext_type=sa.Text()),
            nullable=True,
        ),
        sa.Column(
            "borrower_declined_data",
            postgresql.JSON(astext_type=sa.Text()),
            nullable=True,
        ),
        sa.Column("lender_started_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column(
            "secop_data_verification",
            postgresql.JSON(astext_type=sa.Text()),
            nullable=True,
        ),
        sa.Column("lender_approved_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column(
            "lender_approved_data",
            postgresql.JSON(astext_type=sa.Text()),
            nullable=True,
        ),
        sa.Column(
            "lender_rejected_data",
            postgresql.JSON(astext_type=sa.Text()),
            nullable=True,
        ),
        sa.Column(
            "borrewed_uploaded_contracted_at", sa.DateTime(timezone=True), nullable=True
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("expired_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("archived_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("award_id", sa.Integer(), nullable=False),
        sa.Column("uuid", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("primary_email", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column(
            "award_borrower_identifier",
            sqlmodel.sql.sqltypes.AutoString(),
            nullable=False,
        ),
        sa.Column("borrower_id", sa.Integer(), nullable=True),
        sa.Column("lender_id", sa.Integer(), nullable=True),
        sa.Column("currency", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("repayment_months", sa.Integer(), nullable=True),
        sa.Column("pending_documents", sa.Boolean(), nullable=False),
        sa.Column("pending_email_confirmation", sa.Boolean(), nullable=False),
        sa.Column("completed_in_days", sa.Integer(), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["award_id"],
            ["award.id"],
        ),
        sa.ForeignKeyConstraint(
            ["borrower_id"],
            ["borrower.id"],
        ),
        sa.ForeignKeyConstraint(
            ["lender_id"],
            ["lender.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("award_borrower_identifier"),
    )
    op.create_index(op.f("ix_application_uuid"), "application", ["uuid"], unique=True)
    op.create_table(
        "application_action",
        sa.Column(
            "type",
            sa.Enum(
                "AWARD_UPDATE",
                "BORROWER_UPDATE",
                "FI_UPLOAD_COMPLIANCE",
                "FI_DOWNLOAD_APPLICATION",
                "APPROVED_APPLICATION",
                "REJECTED_APPLICATION",
                "MSME_UPLOAD_DOCUMENT",
                "MSME_CHANGE_EMAIL",
                "MSME_CONFIRM_EMAIL",
                "MSME_RETRY_APPLICATION",
                name="application_action_type",
            ),
            nullable=True,
        ),
        sa.Column("data", postgresql.JSON(astext_type=sa.Text()), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("application_id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["application_id"],
            ["application.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "borrower_document",
        sa.Column(
            "type",
            sa.Enum(
                "INCORPORATION_DOCUMENT",
                "SUPPLIER_REGISTRATION_DOCUMENT",
                "BANK_NAME",
                "BANK_CERTIFICATION_DOCUMENT",
                "FINANCIAL_STATEMENT",
                "SIGNED_CONTRACT",
                "COMPLIANCE_REPORT",
                name="borrower_document_type",
            ),
            nullable=True,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("submitted_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("application_id", sa.Integer(), nullable=False),
        sa.Column("verified", sa.Boolean(), nullable=False),
        sa.Column("file", sa.LargeBinary(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.ForeignKeyConstraint(
            ["application_id"],
            ["application.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "message",
        sa.Column(
            "type",
            sa.Enum(
                "BORROWER_INVITACION",
                "BORROWER_PENDING_APPLICATION_REMINDER",
                "BORROWER_PENDING_SUBMIT_REMINDER",
                "SUBMITION_COMPLETE",
                "CONTRACT_UPLOAD_REQUEST",
                "CONTRACT_UPLOAD_CONFIRMATION",
                "CONTRACT_UPLOAD_CONFIRMATION_TO_FI",
                "NEW_APPLICATION_OCP",
                "NEW_APPLICATION_FI",
                "FI_MESSAGE",
                "APPROVED_APPLICATION",
                "REJECTED_APPLICATION",
                "OVERDUE_APPLICATION",
                name="message_type",
            ),
            nullable=True,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("application_id", sa.Integer(), nullable=False),
        sa.Column(
            "external_message_id", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column("body", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.ForeignKeyConstraint(
            ["application_id"],
            ["application.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("message")
    op.drop_table("borrower_document")
    op.drop_table("application_action")
    op.drop_index(op.f("ix_application_uuid"), table_name="application")
    op.drop_table("application")
    op.drop_table("user")
    op.drop_table("award")
    op.drop_table("lender")
    op.drop_table("borrower")
    # ### end Alembic commands ###
