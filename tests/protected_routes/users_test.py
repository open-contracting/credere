from fastapi import APIRouter, Depends
from sqlalchemy.orm import Session

from app import aws, dependencies, models
from app.db import get_db
from app.settings import app_settings

router = APIRouter()


@router.post("/create-test-user-headers", tags=["users"])
async def create_test_user_headers(
    payload: models.User,
    session: Session = Depends(get_db),
    client: aws.Client = Depends(dependencies.get_aws_client),
):
    # Like create_user().
    user = models.User.create(session, **payload.model_dump())
    response = client.cognito.admin_create_user(
        UserPoolId=app_settings.cognito_pool_id,
        Username=payload.email,
        TemporaryPassword=client.generate_password(),
        MessageAction="SUPPRESS",
        UserAttributes=[{"Name": "email", "Value": payload.email}],
    )
    user.external_id = response["User"]["Username"]
    session.commit()

    # Like change_password().
    response = client.initiate_auth(payload.email, "initial-autogenerated-password")
    if response["ChallengeName"] == "NEW_PASSWORD_REQUIRED":
        session = response["Session"]
        response = client.respond_to_auth_challenge(
            username=payload.email,
            session=session,
            challenge_name="NEW_PASSWORD_REQUIRED",
            new_password="12345-UPPER-lower",
        )
    client.cognito.admin_update_user_attributes(
        UserPoolId=app_settings.cognito_pool_id,
        Username=payload.email,
        UserAttributes=[
            {"Name": "email_verified", "Value": "true"},
        ],
    )

    return {"Authorization": "Bearer " + response["AuthenticationResult"]["AccessToken"]}
